/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.api;

import com.example.mastercard.ApiCallback;
import com.example.mastercard.ApiClient;
import com.example.mastercard.ApiException;
import com.example.mastercard.ApiResponse;
import com.example.mastercard.Configuration;
import com.example.mastercard.Pair;
import com.example.mastercard.ProgressRequestBody;
import com.example.mastercard.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.example.mastercard.model.TokenUnsuspend;
import com.example.mastercard.model.TokenUnsuspendResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenUnsuspendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenUnsuspendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenUnsuspendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for unsuspendAToken
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param tokenUnsuspend JSON object containing parameters for unsuspending a token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response to a token unsuspension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsuspendATokenCall(String id, TokenUnsuspend tokenUnsuspend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenUnsuspend;

        // create path and map variables
        String localVarPath = "/{id}/token/unsuspend"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsuspendATokenValidateBeforeCall(String id, TokenUnsuspend tokenUnsuspend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unsuspendAToken(Async)");
        }

        // verify the required parameter 'tokenUnsuspend' is set
        if (tokenUnsuspend == null) {
            throw new ApiException("Missing the required parameter 'tokenUnsuspend' when calling unsuspendAToken(Async)");
        }

        return unsuspendATokenCall(id, tokenUnsuspend, _callback);

    }

    /**
     * Changes a token state from suspended to active.
     * Used to unsuspend or resume a suspended token and return it to the active state where it may initiate new transactions. Tokens may be suspended by multiple parties (suspenders) concurrently. The token status is updated from ACTIVE to SUSPENDED when the first suspender triggers a suspend action. Additional suspenders can add their suspend action to the list of suspenders. Suspenders can unsuspend only their own suspend action. All suspenders need to perform an unsuspend action to move a token from SUSPENDED to ACTIVE. The token status will only change when the last suspender has unsuspended the token.  For CoF tokens, the only two supported suspenders are issuer and token requestor.  For Apple Pay tokens, there are some differences in behavior versus the general principles. An issuer may add themselves as a suspender to a token already suspended by a cardholder, as above. However, a cardholder cannot suspend a token already suspended by the issuer. As a special case for Apple Pay, an issuer may unsuspend (override) a token already suspended by a cardholder. However, a cardholder cannot unsuspend a token already suspended by the issuer. 
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param tokenUnsuspend JSON object containing parameters for unsuspending a token (required)
     * @return TokenUnsuspendResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response to a token unsuspension </td><td>  -  </td></tr>
     </table>
     */
    public TokenUnsuspendResults unsuspendAToken(String id, TokenUnsuspend tokenUnsuspend) throws ApiException {
        ApiResponse<TokenUnsuspendResults> localVarResp = unsuspendATokenWithHttpInfo(id, tokenUnsuspend);
        return localVarResp.getData();
    }

    /**
     * Changes a token state from suspended to active.
     * Used to unsuspend or resume a suspended token and return it to the active state where it may initiate new transactions. Tokens may be suspended by multiple parties (suspenders) concurrently. The token status is updated from ACTIVE to SUSPENDED when the first suspender triggers a suspend action. Additional suspenders can add their suspend action to the list of suspenders. Suspenders can unsuspend only their own suspend action. All suspenders need to perform an unsuspend action to move a token from SUSPENDED to ACTIVE. The token status will only change when the last suspender has unsuspended the token.  For CoF tokens, the only two supported suspenders are issuer and token requestor.  For Apple Pay tokens, there are some differences in behavior versus the general principles. An issuer may add themselves as a suspender to a token already suspended by a cardholder, as above. However, a cardholder cannot suspend a token already suspended by the issuer. As a special case for Apple Pay, an issuer may unsuspend (override) a token already suspended by a cardholder. However, a cardholder cannot unsuspend a token already suspended by the issuer. 
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param tokenUnsuspend JSON object containing parameters for unsuspending a token (required)
     * @return ApiResponse&lt;TokenUnsuspendResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response to a token unsuspension </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenUnsuspendResults> unsuspendATokenWithHttpInfo(String id, TokenUnsuspend tokenUnsuspend) throws ApiException {
        okhttp3.Call localVarCall = unsuspendATokenValidateBeforeCall(id, tokenUnsuspend, null);
        Type localVarReturnType = new TypeToken<TokenUnsuspendResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Changes a token state from suspended to active. (asynchronously)
     * Used to unsuspend or resume a suspended token and return it to the active state where it may initiate new transactions. Tokens may be suspended by multiple parties (suspenders) concurrently. The token status is updated from ACTIVE to SUSPENDED when the first suspender triggers a suspend action. Additional suspenders can add their suspend action to the list of suspenders. Suspenders can unsuspend only their own suspend action. All suspenders need to perform an unsuspend action to move a token from SUSPENDED to ACTIVE. The token status will only change when the last suspender has unsuspended the token.  For CoF tokens, the only two supported suspenders are issuer and token requestor.  For Apple Pay tokens, there are some differences in behavior versus the general principles. An issuer may add themselves as a suspender to a token already suspended by a cardholder, as above. However, a cardholder cannot suspend a token already suspended by the issuer. As a special case for Apple Pay, an issuer may unsuspend (override) a token already suspended by a cardholder. However, a cardholder cannot unsuspend a token already suspended by the issuer. 
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param tokenUnsuspend JSON object containing parameters for unsuspending a token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response to a token unsuspension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsuspendATokenAsync(String id, TokenUnsuspend tokenUnsuspend, final ApiCallback<TokenUnsuspendResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsuspendATokenValidateBeforeCall(id, tokenUnsuspend, _callback);
        Type localVarReturnType = new TypeToken<TokenUnsuspendResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
