/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.api;

import com.example.mastercard.ApiCallback;
import com.example.mastercard.ApiClient;
import com.example.mastercard.ApiException;
import com.example.mastercard.ApiResponse;
import com.example.mastercard.Configuration;
import com.example.mastercard.Pair;
import com.example.mastercard.ProgressRequestBody;
import com.example.mastercard.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.example.mastercard.model.ErrorsResults;
import com.example.mastercard.model.Search;
import com.example.mastercard.model.SearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchForAToken
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param search JSON object containing parameters to search for Tokens (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful search response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> JSON object containing details of why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchForATokenCall(String id, Search search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = search;

        // create path and map variables
        String localVarPath = "/{id}/search"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchForATokenValidateBeforeCall(String id, Search search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling searchForAToken(Async)");
        }

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling searchForAToken(Async)");
        }

        return searchForATokenCall(id, search, _callback);

    }

    /**
     * Retrieves information associated with one or more tokens.
     * Provides the ability to search for tokens based on Account PAN, Alternate Account Identifier, Token Unique Reference(TUR), Token, Payment App Instance Id, Comment Id, or Virtual Card Number. Returns all of the tokens associated with an account according to the scope of the indicated search request criteria. The response includes key state and informational data for each token, including the Token Unique Reference which is needed for subsequent token lifecycle management activities. Note - The Search API request must include only one of the available search methods Account PAN, Token Unique Reference, Token, Payment App Instance Id, Comment Id, Alternate Account Identifier, or Virtual Card Number. They cannot be used together in a single request. For Incontrol Issuers, searching based on a Real Card Number (RCN) will not be supported  and will return an &#39;EMPTY_RESULT&#39; with a HTTP 200 in the response. 
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param search JSON object containing parameters to search for Tokens (required)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful search response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> JSON object containing details of why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults searchForAToken(String id, Search search) throws ApiException {
        ApiResponse<SearchResults> localVarResp = searchForATokenWithHttpInfo(id, search);
        return localVarResp.getData();
    }

    /**
     * Retrieves information associated with one or more tokens.
     * Provides the ability to search for tokens based on Account PAN, Alternate Account Identifier, Token Unique Reference(TUR), Token, Payment App Instance Id, Comment Id, or Virtual Card Number. Returns all of the tokens associated with an account according to the scope of the indicated search request criteria. The response includes key state and informational data for each token, including the Token Unique Reference which is needed for subsequent token lifecycle management activities. Note - The Search API request must include only one of the available search methods Account PAN, Token Unique Reference, Token, Payment App Instance Id, Comment Id, Alternate Account Identifier, or Virtual Card Number. They cannot be used together in a single request. For Incontrol Issuers, searching based on a Real Card Number (RCN) will not be supported  and will return an &#39;EMPTY_RESULT&#39; with a HTTP 200 in the response. 
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param search JSON object containing parameters to search for Tokens (required)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful search response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> JSON object containing details of why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> searchForATokenWithHttpInfo(String id, Search search) throws ApiException {
        okhttp3.Call localVarCall = searchForATokenValidateBeforeCall(id, search, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves information associated with one or more tokens. (asynchronously)
     * Provides the ability to search for tokens based on Account PAN, Alternate Account Identifier, Token Unique Reference(TUR), Token, Payment App Instance Id, Comment Id, or Virtual Card Number. Returns all of the tokens associated with an account according to the scope of the indicated search request criteria. The response includes key state and informational data for each token, including the Token Unique Reference which is needed for subsequent token lifecycle management activities. Note - The Search API request must include only one of the available search methods Account PAN, Token Unique Reference, Token, Payment App Instance Id, Comment Id, Alternate Account Identifier, or Virtual Card Number. They cannot be used together in a single request. For Incontrol Issuers, searching based on a Real Card Number (RCN) will not be supported  and will return an &#39;EMPTY_RESULT&#39; with a HTTP 200 in the response. 
     * @param id Static endpoint iteration number (Not API Version) (required)
     * @param search JSON object containing parameters to search for Tokens (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful search response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> JSON object containing details of why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchForATokenAsync(String id, Search search, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchForATokenValidateBeforeCall(id, search, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
