/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.mastercard.JSON;

/**
 * UpdateAccountDataNewAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:08:41.015538669-03:00[America/Sao_Paulo]")
public class UpdateAccountDataNewAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_PAN = "AccountPan";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN)
  private String accountPan;

  public static final String SERIALIZED_NAME_NEW_FINANCIAL_ACCOUNT_ID = "NewFinancialAccountId";
  @SerializedName(SERIALIZED_NAME_NEW_FINANCIAL_ACCOUNT_ID)
  private String newFinancialAccountId;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "ExpirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_ACCOUNT_PAN_SEQUENCE_NUMBER = "AccountPanSequenceNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN_SEQUENCE_NUMBER)
  private String accountPanSequenceNumber;

  public UpdateAccountDataNewAccount() {
  }

  public UpdateAccountDataNewAccount accountPan(String accountPan) {
    this.accountPan = accountPan;
    return this;
  }

   /**
   * When present, return tokens for the account matching this  Primary Account Number (PAN), for any waller provider or device. Optional, only present in Token Update.
   * @return accountPan
  **/
  @javax.annotation.Nullable
  public String getAccountPan() {
    return accountPan;
  }

  public void setAccountPan(String accountPan) {
    this.accountPan = accountPan;
  }


  public UpdateAccountDataNewAccount newFinancialAccountId(String newFinancialAccountId) {
    this.newFinancialAccountId = newFinancialAccountId;
    return this;
  }

   /**
   * New Financial Account Identifier to be applied to the updated token(s) if there is in fact new Financial Account Identifier. Conditional field; must be present if CurrentFinancialAccountInformation fields are present. Only present in Token Update.
   * @return newFinancialAccountId
  **/
  @javax.annotation.Nullable
  public String getNewFinancialAccountId() {
    return newFinancialAccountId;
  }

  public void setNewFinancialAccountId(String newFinancialAccountId) {
    this.newFinancialAccountId = newFinancialAccountId;
  }


  public UpdateAccountDataNewAccount expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * New expiration date to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId or CurrentFinanciaAccountInformation is present. Optional, if updating PAN mapping or PAN Sequence Number.  Only present in Token Update.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public UpdateAccountDataNewAccount accountPanSequenceNumber(String accountPanSequenceNumber) {
    this.accountPanSequenceNumber = accountPanSequenceNumber;
    return this;
  }

   /**
   * New PAN sequence number to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId or CurrentFinanciaAccountInformation is present. Optional, if updating PAN mapping or Expiration Date.  Only present in Token Update.
   * @return accountPanSequenceNumber
  **/
  @javax.annotation.Nullable
  public String getAccountPanSequenceNumber() {
    return accountPanSequenceNumber;
  }

  public void setAccountPanSequenceNumber(String accountPanSequenceNumber) {
    this.accountPanSequenceNumber = accountPanSequenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountDataNewAccount updateAccountDataNewAccount = (UpdateAccountDataNewAccount) o;
    return Objects.equals(this.accountPan, updateAccountDataNewAccount.accountPan) &&
        Objects.equals(this.newFinancialAccountId, updateAccountDataNewAccount.newFinancialAccountId) &&
        Objects.equals(this.expirationDate, updateAccountDataNewAccount.expirationDate) &&
        Objects.equals(this.accountPanSequenceNumber, updateAccountDataNewAccount.accountPanSequenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountPan, newFinancialAccountId, expirationDate, accountPanSequenceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountDataNewAccount {\n");
    sb.append("    accountPan: ").append(toIndentedString(accountPan)).append("\n");
    sb.append("    newFinancialAccountId: ").append(toIndentedString(newFinancialAccountId)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    accountPanSequenceNumber: ").append(toIndentedString(accountPanSequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountPan");
    openapiFields.add("NewFinancialAccountId");
    openapiFields.add("ExpirationDate");
    openapiFields.add("AccountPanSequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateAccountDataNewAccount
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccountDataNewAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccountDataNewAccount is not found in the empty JSON string", UpdateAccountDataNewAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccountDataNewAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccountDataNewAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountPan") != null && !jsonObj.get("AccountPan").isJsonNull()) && !jsonObj.get("AccountPan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountPan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountPan").toString()));
      }
      if ((jsonObj.get("NewFinancialAccountId") != null && !jsonObj.get("NewFinancialAccountId").isJsonNull()) && !jsonObj.get("NewFinancialAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewFinancialAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewFinancialAccountId").toString()));
      }
      if ((jsonObj.get("ExpirationDate") != null && !jsonObj.get("ExpirationDate").isJsonNull()) && !jsonObj.get("ExpirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpirationDate").toString()));
      }
      if ((jsonObj.get("AccountPanSequenceNumber") != null && !jsonObj.get("AccountPanSequenceNumber").isJsonNull()) && !jsonObj.get("AccountPanSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountPanSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountPanSequenceNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccountDataNewAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccountDataNewAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccountDataNewAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccountDataNewAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccountDataNewAccount>() {
           @Override
           public void write(JsonWriter out, UpdateAccountDataNewAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccountDataNewAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateAccountDataNewAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateAccountDataNewAccount
  * @throws IOException if the JSON string is invalid with respect to UpdateAccountDataNewAccount
  */
  public static UpdateAccountDataNewAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccountDataNewAccount.class);
  }

 /**
  * Convert an instance of UpdateAccountDataNewAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

