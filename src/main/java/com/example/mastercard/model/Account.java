/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.model;

import java.util.Objects;
import com.example.mastercard.model.Tokens;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.mastercard.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:08:41.015538669-03:00[America/Sao_Paulo]")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_PAN_SUFFIX = "AccountPanSuffix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN_SUFFIX)
  private String accountPanSuffix;

  public static final String SERIALIZED_NAME_FINANCIAL_ACCOUNT_SUFFIX = "FinancialAccountSuffix";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_ACCOUNT_SUFFIX)
  private String financialAccountSuffix;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_INTERBANK_CARD_ASSOCIATION_ID = "InterbankCardAssociationId";
  @SerializedName(SERIALIZED_NAME_INTERBANK_CARD_ASSOCIATION_ID)
  private BigDecimal interbankCardAssociationId;

  public static final String SERIALIZED_NAME_INSTITUTION_NAME = "InstitutionName";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_NAME)
  private String institutionName;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "ExpirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_ALTERNATE_ACCOUNT_IDENTIFIER_SUFFIX = "AlternateAccountIdentifierSuffix";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ACCOUNT_IDENTIFIER_SUFFIX)
  private String alternateAccountIdentifierSuffix;

  public static final String SERIALIZED_NAME_TOKENS = "Tokens";
  @SerializedName(SERIALIZED_NAME_TOKENS)
  private Tokens tokens;

  public Account() {
  }

  public Account accountPanSuffix(String accountPanSuffix) {
    this.accountPanSuffix = accountPanSuffix;
    return this;
  }

   /**
   * Last 4 digits of Account PAN mapped (or to be mapped) to Token(s).
   * @return accountPanSuffix
  **/
  @javax.annotation.Nullable
  public String getAccountPanSuffix() {
    return accountPanSuffix;
  }

  public void setAccountPanSuffix(String accountPanSuffix) {
    this.accountPanSuffix = accountPanSuffix;
  }


  public Account financialAccountSuffix(String financialAccountSuffix) {
    this.financialAccountSuffix = financialAccountSuffix;
    return this;
  }

   /**
   * Last 4 digits of the financial account information mapped (or to be mapped) to token(s). Conditional field, only present when mapping is tied to a financial account.
   * @return financialAccountSuffix
  **/
  @javax.annotation.Nullable
  public String getFinancialAccountSuffix() {
    return financialAccountSuffix;
  }

  public void setFinancialAccountSuffix(String financialAccountSuffix) {
    this.financialAccountSuffix = financialAccountSuffix;
  }


  public Account countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The country of the financial account. Expressed as a 3-letter (alpha-3) country code as defined in ISO 3166-1. Conditional field. Present when mapping is tied to a financial account. 
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Account interbankCardAssociationId(BigDecimal interbankCardAssociationId) {
    this.interbankCardAssociationId = interbankCardAssociationId;
    return this;
  }

   /**
   * The id assigned by Mastercard to the financial institution. Conditional field. Present when mapping is tied to a financial account.
   * @return interbankCardAssociationId
  **/
  @javax.annotation.Nullable
  public BigDecimal getInterbankCardAssociationId() {
    return interbankCardAssociationId;
  }

  public void setInterbankCardAssociationId(BigDecimal interbankCardAssociationId) {
    this.interbankCardAssociationId = interbankCardAssociationId;
  }


  public Account institutionName(String institutionName) {
    this.institutionName = institutionName;
    return this;
  }

   /**
   * The name of the financial institution associated with the account. Conditional field. Present when mapping is tied to a financial account.
   * @return institutionName
  **/
  @javax.annotation.Nullable
  public String getInstitutionName() {
    return institutionName;
  }

  public void setInstitutionName(String institutionName) {
    this.institutionName = institutionName;
  }


  public Account expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Expiration date of Account PAN mapped (or to be mapped) to Token(s). MMYY format.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Account alternateAccountIdentifierSuffix(String alternateAccountIdentifierSuffix) {
    this.alternateAccountIdentifierSuffix = alternateAccountIdentifierSuffix;
    return this;
  }

   /**
   * Alternate Account Identifier is a cardholder friendly reference to a bank account. It is typically used to identify associated tokens when the cardholder is unaware of their Account PAN. The Alternate Account Identifier Suffix exposes just the last few characters of the full identifier, in order to protect the full identifier from possible fraud. The suffix may be up to 8 characters long.
   * @return alternateAccountIdentifierSuffix
  **/
  @javax.annotation.Nullable
  public String getAlternateAccountIdentifierSuffix() {
    return alternateAccountIdentifierSuffix;
  }

  public void setAlternateAccountIdentifierSuffix(String alternateAccountIdentifierSuffix) {
    this.alternateAccountIdentifierSuffix = alternateAccountIdentifierSuffix;
  }


  public Account tokens(Tokens tokens) {
    this.tokens = tokens;
    return this;
  }

   /**
   * Get tokens
   * @return tokens
  **/
  @javax.annotation.Nullable
  public Tokens getTokens() {
    return tokens;
  }

  public void setTokens(Tokens tokens) {
    this.tokens = tokens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountPanSuffix, account.accountPanSuffix) &&
        Objects.equals(this.financialAccountSuffix, account.financialAccountSuffix) &&
        Objects.equals(this.countryCode, account.countryCode) &&
        Objects.equals(this.interbankCardAssociationId, account.interbankCardAssociationId) &&
        Objects.equals(this.institutionName, account.institutionName) &&
        Objects.equals(this.expirationDate, account.expirationDate) &&
        Objects.equals(this.alternateAccountIdentifierSuffix, account.alternateAccountIdentifierSuffix) &&
        Objects.equals(this.tokens, account.tokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountPanSuffix, financialAccountSuffix, countryCode, interbankCardAssociationId, institutionName, expirationDate, alternateAccountIdentifierSuffix, tokens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountPanSuffix: ").append(toIndentedString(accountPanSuffix)).append("\n");
    sb.append("    financialAccountSuffix: ").append(toIndentedString(financialAccountSuffix)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    interbankCardAssociationId: ").append(toIndentedString(interbankCardAssociationId)).append("\n");
    sb.append("    institutionName: ").append(toIndentedString(institutionName)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    alternateAccountIdentifierSuffix: ").append(toIndentedString(alternateAccountIdentifierSuffix)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountPanSuffix");
    openapiFields.add("FinancialAccountSuffix");
    openapiFields.add("CountryCode");
    openapiFields.add("InterbankCardAssociationId");
    openapiFields.add("InstitutionName");
    openapiFields.add("ExpirationDate");
    openapiFields.add("AlternateAccountIdentifierSuffix");
    openapiFields.add("Tokens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Account
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountPanSuffix") != null && !jsonObj.get("AccountPanSuffix").isJsonNull()) && !jsonObj.get("AccountPanSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountPanSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountPanSuffix").toString()));
      }
      if ((jsonObj.get("FinancialAccountSuffix") != null && !jsonObj.get("FinancialAccountSuffix").isJsonNull()) && !jsonObj.get("FinancialAccountSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FinancialAccountSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FinancialAccountSuffix").toString()));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      if ((jsonObj.get("InstitutionName") != null && !jsonObj.get("InstitutionName").isJsonNull()) && !jsonObj.get("InstitutionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstitutionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstitutionName").toString()));
      }
      if ((jsonObj.get("ExpirationDate") != null && !jsonObj.get("ExpirationDate").isJsonNull()) && !jsonObj.get("ExpirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpirationDate").toString()));
      }
      if ((jsonObj.get("AlternateAccountIdentifierSuffix") != null && !jsonObj.get("AlternateAccountIdentifierSuffix").isJsonNull()) && !jsonObj.get("AlternateAccountIdentifierSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlternateAccountIdentifierSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlternateAccountIdentifierSuffix").toString()));
      }
      // validate the optional field `Tokens`
      if (jsonObj.get("Tokens") != null && !jsonObj.get("Tokens").isJsonNull()) {
        Tokens.validateJsonElement(jsonObj.get("Tokens"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Account given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Account
  * @throws IOException if the JSON string is invalid with respect to Account
  */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

 /**
  * Convert an instance of Account to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

