/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.mastercard.JSON;

/**
 * AccountDataCurrentAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:08:41.015538669-03:00[America/Sao_Paulo]")
public class AccountDataCurrentAccount {
  public static final String SERIALIZED_NAME_VIRTUAL_CARD_NUMBER = "VirtualCardNumber";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_CARD_NUMBER)
  private String virtualCardNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_PAN = "AccountPan";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN)
  private String accountPan;

  public static final String SERIALIZED_NAME_TOKEN = "Token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_ALTERNATE_ACCOUNT_IDENTIFIER = "AlternateAccountIdentifier";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ACCOUNT_IDENTIFIER)
  private String alternateAccountIdentifier;

  public static final String SERIALIZED_NAME_FINANCIAL_ACCOUNT_ID = "FinancialAccountId";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_ACCOUNT_ID)
  private String financialAccountId;

  public AccountDataCurrentAccount() {
  }

  public AccountDataCurrentAccount virtualCardNumber(String virtualCardNumber) {
    this.virtualCardNumber = virtualCardNumber;
    return this;
  }

   /**
   * When present, return tokens for the VirtualCardNumber matching this VCN, for any Wallet Provider or device. Optional for Token Search
   * @return virtualCardNumber
  **/
  @javax.annotation.Nullable
  public String getVirtualCardNumber() {
    return virtualCardNumber;
  }

  public void setVirtualCardNumber(String virtualCardNumber) {
    this.virtualCardNumber = virtualCardNumber;
  }


  public AccountDataCurrentAccount accountPan(String accountPan) {
    this.accountPan = accountPan;
    return this;
  }

   /**
   * When present, return tokens for the Account matching this Primary Account Number (PAN), for any Wallet Provider or device. Optional for Token Search. Conditional field, used for updating  all tokens mapped to a single Account PAN and must not be present  when TokenUniqueReference or CurrentFinancialAccountInformation  is present for Token Update.
   * @return accountPan
  **/
  @javax.annotation.Nullable
  public String getAccountPan() {
    return accountPan;
  }

  public void setAccountPan(String accountPan) {
    this.accountPan = accountPan;
  }


  public AccountDataCurrentAccount token(String token) {
    this.token = token;
    return this;
  }

   /**
   * When present, the search will return one specific token.
   * @return token
  **/
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public AccountDataCurrentAccount alternateAccountIdentifier(String alternateAccountIdentifier) {
    this.alternateAccountIdentifier = alternateAccountIdentifier;
    return this;
  }

   /**
   * When present, the search will return tokens matching this Alternate Account Identifier, for any Wallet Provider or device. Alternate Account Identifier will be minimum 9 and maximum 64 characters. Space characters are not allowed.
   * @return alternateAccountIdentifier
  **/
  @javax.annotation.Nullable
  public String getAlternateAccountIdentifier() {
    return alternateAccountIdentifier;
  }

  public void setAlternateAccountIdentifier(String alternateAccountIdentifier) {
    this.alternateAccountIdentifier = alternateAccountIdentifier;
  }


  public AccountDataCurrentAccount financialAccountId(String financialAccountId) {
    this.financialAccountId = financialAccountId;
    return this;
  }

   /**
   * When present, return tokens for the Account matching this Financial Account Information, for any Wallet Provider or device. Optional for Token Search. Conditional field, used  for updating all tokens mapped to a single Financial Account  and must not be present when TokenUniqueReference or  CurrentAccountPan is present for Token Update.
   * @return financialAccountId
  **/
  @javax.annotation.Nullable
  public String getFinancialAccountId() {
    return financialAccountId;
  }

  public void setFinancialAccountId(String financialAccountId) {
    this.financialAccountId = financialAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountDataCurrentAccount accountDataCurrentAccount = (AccountDataCurrentAccount) o;
    return Objects.equals(this.virtualCardNumber, accountDataCurrentAccount.virtualCardNumber) &&
        Objects.equals(this.accountPan, accountDataCurrentAccount.accountPan) &&
        Objects.equals(this.token, accountDataCurrentAccount.token) &&
        Objects.equals(this.alternateAccountIdentifier, accountDataCurrentAccount.alternateAccountIdentifier) &&
        Objects.equals(this.financialAccountId, accountDataCurrentAccount.financialAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(virtualCardNumber, accountPan, token, alternateAccountIdentifier, financialAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountDataCurrentAccount {\n");
    sb.append("    virtualCardNumber: ").append(toIndentedString(virtualCardNumber)).append("\n");
    sb.append("    accountPan: ").append(toIndentedString(accountPan)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    alternateAccountIdentifier: ").append(toIndentedString(alternateAccountIdentifier)).append("\n");
    sb.append("    financialAccountId: ").append(toIndentedString(financialAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VirtualCardNumber");
    openapiFields.add("AccountPan");
    openapiFields.add("Token");
    openapiFields.add("AlternateAccountIdentifier");
    openapiFields.add("FinancialAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountDataCurrentAccount
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountDataCurrentAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountDataCurrentAccount is not found in the empty JSON string", AccountDataCurrentAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountDataCurrentAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountDataCurrentAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("VirtualCardNumber") != null && !jsonObj.get("VirtualCardNumber").isJsonNull()) && !jsonObj.get("VirtualCardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VirtualCardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VirtualCardNumber").toString()));
      }
      if ((jsonObj.get("AccountPan") != null && !jsonObj.get("AccountPan").isJsonNull()) && !jsonObj.get("AccountPan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountPan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountPan").toString()));
      }
      if ((jsonObj.get("Token") != null && !jsonObj.get("Token").isJsonNull()) && !jsonObj.get("Token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Token").toString()));
      }
      if ((jsonObj.get("AlternateAccountIdentifier") != null && !jsonObj.get("AlternateAccountIdentifier").isJsonNull()) && !jsonObj.get("AlternateAccountIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlternateAccountIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlternateAccountIdentifier").toString()));
      }
      if ((jsonObj.get("FinancialAccountId") != null && !jsonObj.get("FinancialAccountId").isJsonNull()) && !jsonObj.get("FinancialAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FinancialAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FinancialAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountDataCurrentAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountDataCurrentAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountDataCurrentAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountDataCurrentAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountDataCurrentAccount>() {
           @Override
           public void write(JsonWriter out, AccountDataCurrentAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountDataCurrentAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountDataCurrentAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountDataCurrentAccount
  * @throws IOException if the JSON string is invalid with respect to AccountDataCurrentAccount
  */
  public static AccountDataCurrentAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountDataCurrentAccount.class);
  }

 /**
  * Convert an instance of AccountDataCurrentAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

