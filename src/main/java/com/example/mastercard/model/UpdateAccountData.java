/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.model;

import java.util.Objects;
import com.example.mastercard.model.UpdateAccountDataCurrentAccount;
import com.example.mastercard.model.UpdateAccountDataNewAccount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.mastercard.JSON;

/**
 * Contains an encrypted json object. Encrypted by the ephemeral AES key using CBC mode (IV as provided in &#39;Iv&#39;, or zero if none provided) and PKCS#7 padding.  The JSON object being encrypted will be defined in the context of the API call.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:08:41.015538669-03:00[America/Sao_Paulo]")
public class UpdateAccountData {
  public static final String SERIALIZED_NAME_CURRENT_ACCOUNT = "CurrentAccount";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACCOUNT)
  private UpdateAccountDataCurrentAccount currentAccount;

  public static final String SERIALIZED_NAME_NEW_ACCOUNT = "NewAccount";
  @SerializedName(SERIALIZED_NAME_NEW_ACCOUNT)
  private UpdateAccountDataNewAccount newAccount;

  public UpdateAccountData() {
  }

  public UpdateAccountData currentAccount(UpdateAccountDataCurrentAccount currentAccount) {
    this.currentAccount = currentAccount;
    return this;
  }

   /**
   * Get currentAccount
   * @return currentAccount
  **/
  @javax.annotation.Nullable
  public UpdateAccountDataCurrentAccount getCurrentAccount() {
    return currentAccount;
  }

  public void setCurrentAccount(UpdateAccountDataCurrentAccount currentAccount) {
    this.currentAccount = currentAccount;
  }


  public UpdateAccountData newAccount(UpdateAccountDataNewAccount newAccount) {
    this.newAccount = newAccount;
    return this;
  }

   /**
   * Get newAccount
   * @return newAccount
  **/
  @javax.annotation.Nullable
  public UpdateAccountDataNewAccount getNewAccount() {
    return newAccount;
  }

  public void setNewAccount(UpdateAccountDataNewAccount newAccount) {
    this.newAccount = newAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountData updateAccountData = (UpdateAccountData) o;
    return Objects.equals(this.currentAccount, updateAccountData.currentAccount) &&
        Objects.equals(this.newAccount, updateAccountData.newAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentAccount, newAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountData {\n");
    sb.append("    currentAccount: ").append(toIndentedString(currentAccount)).append("\n");
    sb.append("    newAccount: ").append(toIndentedString(newAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentAccount");
    openapiFields.add("NewAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateAccountData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccountData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccountData is not found in the empty JSON string", UpdateAccountData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccountData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccountData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CurrentAccount`
      if (jsonObj.get("CurrentAccount") != null && !jsonObj.get("CurrentAccount").isJsonNull()) {
        UpdateAccountDataCurrentAccount.validateJsonElement(jsonObj.get("CurrentAccount"));
      }
      // validate the optional field `NewAccount`
      if (jsonObj.get("NewAccount") != null && !jsonObj.get("NewAccount").isJsonNull()) {
        UpdateAccountDataNewAccount.validateJsonElement(jsonObj.get("NewAccount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccountData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccountData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccountData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccountData.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccountData>() {
           @Override
           public void write(JsonWriter out, UpdateAccountData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccountData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateAccountData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateAccountData
  * @throws IOException if the JSON string is invalid with respect to UpdateAccountData
  */
  public static UpdateAccountData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccountData.class);
  }

 /**
  * Convert an instance of UpdateAccountData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

