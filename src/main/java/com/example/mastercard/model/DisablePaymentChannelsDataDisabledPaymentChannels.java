/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.mastercard.JSON;

/**
 * DisablePaymentChannelsDataDisabledPaymentChannels
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:08:41.015538669-03:00[America/Sao_Paulo]")
public class DisablePaymentChannelsDataDisabledPaymentChannels {
  public static final String SERIALIZED_NAME_DISABLED_CHANNEL = "DisabledChannel";
  @SerializedName(SERIALIZED_NAME_DISABLED_CHANNEL)
  private String disabledChannel;

  public DisablePaymentChannelsDataDisabledPaymentChannels() {
  }

  public DisablePaymentChannelsDataDisabledPaymentChannels disabledChannel(String disabledChannel) {
    this.disabledChannel = disabledChannel;
    return this;
  }

   /**
   * The payment channels that disabled for the token. Possible values are:   * \&quot;CONTACTLESS\&quot; - Contactless.   * \&quot;MP_QR_CODE\&quot; - Merchant Presented QR (MPQR).   * \&quot;CP_QR_CODE\&quot; - Consumer Presented QR (CPQR).   * \&quot;ECOMMERCE\&quot; - Digital Secure Remote Payment (DSRP) / In-App.   * \&quot;P2P\&quot; - Person to Person (P2P).   * \&quot;POS_SWIPE\&quot; - Magnetic Secure Transmission (MST) / Dynamic Magnetic Stripe Data (DMSD) 
   * @return disabledChannel
  **/
  @javax.annotation.Nullable
  public String getDisabledChannel() {
    return disabledChannel;
  }

  public void setDisabledChannel(String disabledChannel) {
    this.disabledChannel = disabledChannel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisablePaymentChannelsDataDisabledPaymentChannels disablePaymentChannelsDataDisabledPaymentChannels = (DisablePaymentChannelsDataDisabledPaymentChannels) o;
    return Objects.equals(this.disabledChannel, disablePaymentChannelsDataDisabledPaymentChannels.disabledChannel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabledChannel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisablePaymentChannelsDataDisabledPaymentChannels {\n");
    sb.append("    disabledChannel: ").append(toIndentedString(disabledChannel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DisabledChannel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DisablePaymentChannelsDataDisabledPaymentChannels
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisablePaymentChannelsDataDisabledPaymentChannels.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisablePaymentChannelsDataDisabledPaymentChannels is not found in the empty JSON string", DisablePaymentChannelsDataDisabledPaymentChannels.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisablePaymentChannelsDataDisabledPaymentChannels.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisablePaymentChannelsDataDisabledPaymentChannels` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DisabledChannel") != null && !jsonObj.get("DisabledChannel").isJsonNull()) && !jsonObj.get("DisabledChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisabledChannel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisablePaymentChannelsDataDisabledPaymentChannels.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisablePaymentChannelsDataDisabledPaymentChannels' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisablePaymentChannelsDataDisabledPaymentChannels> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisablePaymentChannelsDataDisabledPaymentChannels.class));

       return (TypeAdapter<T>) new TypeAdapter<DisablePaymentChannelsDataDisabledPaymentChannels>() {
           @Override
           public void write(JsonWriter out, DisablePaymentChannelsDataDisabledPaymentChannels value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisablePaymentChannelsDataDisabledPaymentChannels read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DisablePaymentChannelsDataDisabledPaymentChannels given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DisablePaymentChannelsDataDisabledPaymentChannels
  * @throws IOException if the JSON string is invalid with respect to DisablePaymentChannelsDataDisabledPaymentChannels
  */
  public static DisablePaymentChannelsDataDisabledPaymentChannels fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisablePaymentChannelsDataDisabledPaymentChannels.class);
  }

 /**
  * Convert an instance of DisablePaymentChannelsDataDisabledPaymentChannels to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

