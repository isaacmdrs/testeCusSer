/*
 * Mastercard Digital Enablement Service Customer Service API
 * The MDES Customer Service API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.mastercard.model;

import java.util.Objects;
import com.example.mastercard.model.AuditInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.mastercard.JSON;

/**
 * TokenDeleteData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:08:41.015538669-03:00[America/Sao_Paulo]")
public class TokenDeleteData {
  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "TokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public static final String SERIALIZED_NAME_COMMENT_TEXT = "CommentText";
  @SerializedName(SERIALIZED_NAME_COMMENT_TEXT)
  private String commentText;

  public static final String SERIALIZED_NAME_REASON_CODE = "ReasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_DELETE_FROM_CONSUMER_APP = "DeleteFromConsumerApp";
  @SerializedName(SERIALIZED_NAME_DELETE_FROM_CONSUMER_APP)
  private String deleteFromConsumerApp;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "AuditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AuditInfo auditInfo;

  public TokenDeleteData() {
  }

  public TokenDeleteData tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

   /**
   * The TokenUniqueReference of the token. Length 48 characters.
   * @return tokenUniqueReference
  **/
  @javax.annotation.Nonnull
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }


  public TokenDeleteData commentText(String commentText) {
    this.commentText = commentText;
    return this;
  }

   /**
   * Comment related to suspension.
   * @return commentText
  **/
  @javax.annotation.Nullable
  public String getCommentText() {
    return commentText;
  }

  public void setCommentText(String commentText) {
    this.commentText = commentText;
  }


  public TokenDeleteData reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * The reason for the action. Valid values:   * \&quot;L\&quot; - Cardholder confirmed token device lost   * \&quot;S\&quot; - Cardholder confirmed token device stolen   * \&quot;F\&quot; - Issuer or cardholder confirmed fraudulent token transactions (Deprecated)   * \&quot;T\&quot; - Issuer or cardholder confirmed fraudulent token transactions   * \&quot;C\&quot; - Account closed   * \&quot;D\&quot; - Issuer consumer deleted   * \&quot;Z\&quot; - Other 
   * @return reasonCode
  **/
  @javax.annotation.Nonnull
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public TokenDeleteData deleteFromConsumerApp(String deleteFromConsumerApp) {
    this.deleteFromConsumerApp = deleteFromConsumerApp;
    return this;
  }

   /**
   * Indicates if the token should be deleted only from the device/token requestor or both device and the MDES platform. Valid values:   * \&quot;true\&quot; - the token will be removed only from the device/token requestor but will remain active on the MDES platform. Any historical payments (such as subscriptions) will continue to be processed but no new payments will be possible as the token will have been removed from the device/token requestor.   * \&quot;false\&quot; - the token will be deleted from both the device/token requestor and the MDES platform. 
   * @return deleteFromConsumerApp
  **/
  @javax.annotation.Nullable
  public String getDeleteFromConsumerApp() {
    return deleteFromConsumerApp;
  }

  public void setDeleteFromConsumerApp(String deleteFromConsumerApp) {
    this.deleteFromConsumerApp = deleteFromConsumerApp;
  }


  public TokenDeleteData auditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nonnull
  public AuditInfo getAuditInfo() {
    return auditInfo;
  }

  public void setAuditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenDeleteData tokenDeleteData = (TokenDeleteData) o;
    return Objects.equals(this.tokenUniqueReference, tokenDeleteData.tokenUniqueReference) &&
        Objects.equals(this.commentText, tokenDeleteData.commentText) &&
        Objects.equals(this.reasonCode, tokenDeleteData.reasonCode) &&
        Objects.equals(this.deleteFromConsumerApp, tokenDeleteData.deleteFromConsumerApp) &&
        Objects.equals(this.auditInfo, tokenDeleteData.auditInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenUniqueReference, commentText, reasonCode, deleteFromConsumerApp, auditInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenDeleteData {\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("    commentText: ").append(toIndentedString(commentText)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    deleteFromConsumerApp: ").append(toIndentedString(deleteFromConsumerApp)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TokenUniqueReference");
    openapiFields.add("CommentText");
    openapiFields.add("ReasonCode");
    openapiFields.add("DeleteFromConsumerApp");
    openapiFields.add("AuditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TokenUniqueReference");
    openapiRequiredFields.add("ReasonCode");
    openapiRequiredFields.add("AuditInfo");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenDeleteData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenDeleteData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenDeleteData is not found in the empty JSON string", TokenDeleteData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenDeleteData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenDeleteData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenDeleteData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TokenUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TokenUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TokenUniqueReference").toString()));
      }
      if ((jsonObj.get("CommentText") != null && !jsonObj.get("CommentText").isJsonNull()) && !jsonObj.get("CommentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommentText").toString()));
      }
      if (!jsonObj.get("ReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReasonCode").toString()));
      }
      if ((jsonObj.get("DeleteFromConsumerApp") != null && !jsonObj.get("DeleteFromConsumerApp").isJsonNull()) && !jsonObj.get("DeleteFromConsumerApp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeleteFromConsumerApp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeleteFromConsumerApp").toString()));
      }
      // validate the required field `AuditInfo`
      AuditInfo.validateJsonElement(jsonObj.get("AuditInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenDeleteData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenDeleteData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenDeleteData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenDeleteData.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenDeleteData>() {
           @Override
           public void write(JsonWriter out, TokenDeleteData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenDeleteData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenDeleteData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenDeleteData
  * @throws IOException if the JSON string is invalid with respect to TokenDeleteData
  */
  public static TokenDeleteData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenDeleteData.class);
  }

 /**
  * Convert an instance of TokenDeleteData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

